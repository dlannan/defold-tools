
local mpool = require("voxloader.meshpool")
local voxload = require("voxloader.voxloader")

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	-- position directional light
	self.light = vmath.vector4(0, 10, 100.0, 0)

	-- Second param regenerates meshes and go files
	-- Only need 6 meshes - one for each side of each voxel cube. Voxel cubes are added to each mesh when loaded.
	-- The mesh can be modified at runtime to add/remove verts from the faces.
	mpool.init(6, true, "main/main.collection", "temp")
	self.mesh = {}

	--local pos = vmath.vector3(0, 0, 0)
	self.mesh[1] = voxload:addmesh("/assets/voxdata/cars.vox", "mesh1", pos)
	local pos = vmath.vector3(-2, 0, 0)
	--self.mesh[2] = voxload:addmesh("/assets/voxdata/castle.vox", "mesh2", pos)
	-- local pos = vmath.vector3(2, 0, 0)
	-- self.mesh[3] = voxload:addmesh("/assets/voxdata/doom.vox", "mesh3", pos)
	--local pos = vmath.vector3(-4, 0, 0)
	--self.mesh[4] = voxload:addmesh("/assets/voxdata/teapot.vox", "mesh4", pos)

	self.fmeshA = go.get_rotation("/temp")	
	self.angle = 0.0

	-- Toggle the visual profiler on hot reload.
	self.profile = false
	profiler.enable_ui(self.profile)
end

function update(self)

	local rad_angle = math.rad(self.angle)
	local rotr = vmath.quat_rotation_x(math.rad(-90))		
	local rot_angle = rotr * vmath.quat_rotation_z(rad_angle)		
	local rotx_angle = vmath.quat_rotation_y(rad_angle)

	go.set_rotation(self.fmeshA * rot_angle, "/temp")
	self.angle = self.angle + 1.0

	-- mpool.updateall( function( meshobj ) 
	-- 	--local m = go.get_world_transform(meshobj.goname)
	-- 	model.set_constant(meshobj.goname, "light", self.light)
	-- end )

end

function on_input(self, action_id, action)

	-- move directional light based on input
	self.light.x = 10 * ((action.x - 480) / 480)
	self.light.y = 10 * ((action.y - 320) / 320)
	self.light.z = 5.0
	
	self.camerapos = go.get_position("/camera")

	-- Check some keys - 1, 2, 3 for profiling
	if(action.released) then 
	if action_id == hash("zero") then
		self.profile = not self.profile
		profiler.enable_ui(self.profile)
	end 
	if action_id == hash("one") then
		profiler.set_ui_mode(profiler.MODE_RUN)
	end 
	if action_id == hash("two") then
		profiler.set_ui_mode(profiler.MODE_PAUSE)
	end
	if action_id == hash("three") then
		profiler.set_ui_mode(profiler.MODE_RECORD)
	end
	end
end

function on_message(self, message_id, message)	
	
end

function on_reload(self)
	-- Toggle the visual profiler on hot reload.
	profiler.enable_ui(true)
end
