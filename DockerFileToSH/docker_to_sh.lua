#!/usr/bin/luajit

------------------------------------------------------------------------------
-- This converts a docker file to a shell file
--Almost guaranteed to not work with many Docker files, but hey, it works for us
------------------------------------------------------------------------------

local DM_PACKAGES_URL           = "http://localhost:8000"
local HOME_DIRECTORY            ='/home/dlannan/dev/defold-extender/extender'
local CONVERT_HOME_DIRECTORY    = 1

local MS_VISUAL_STUDIO_VER      = "14.28.29910"
local WINDOWS_SDK_10_VERSION    = "10.0.18362.0"

local INPUT="Dockerfile"
local OUTPUT="Dockerfile.sh"

------------------------------------------------------------------------------
local function runcmd( cmd )

    local stdout = nil
    local fh = io.popen( cmd, "r" )
    if(fh) then 
        stdout = fh:read("*a")
        fh:close()
    end
    return stdout
end 

------------------------------------------------------------------------------
-- Make a copy - dont break original Docker.
local res = runcmd("cp -f "..INPUT.." "..OUTPUT)
print(res)

-- Get the copy as a string to play with. 
local dockerdata = ""
for line in io.lines(OUTPUT) do dockerdata = dockerdata..line.."\n" end
------------------------------------------------------------------------------

dockerdata = [[
DM_PACKAGES_URL="]]..DM_PACKAGES_URL..[["
]]..dockerdata

-- Add extender user if doesnt exist
dockerdata = string.gsub(dockerdata, "# Add extender user", [[
# Add extender user
id -u extender &>/dev/null || useradd extender
]] )

--  Convert FROM, MAINTAINER, VOLUME to comments
dockerdata = string.gsub(dockerdata, "FROM ", "# FROM ")
--sed -i "s/^FROM\s/# FROM /g" $OUTPUT
dockerdata = string.gsub(dockerdata, "MAINTAINER ", "# MAINTAINER ")
--sed -i "s/^MAINTAINER\s/# MAINTAINER /g" $OUTPUT
dockerdata = string.gsub(dockerdata, "VOLUME ", "# VOLUME ")
--sed -i "s/^VOLUME\s/# VOLUME /g" $OUTPUT

-- Get rid of RUNs
dockerdata = string.gsub(dockerdata, "RUN[^\n]+", "")
--sed -i "s/^RUN.*//g" $OUTPUT
--  Get rid of ARGs
dockerdata = string.gsub(dockerdata, "ARG[^\n]+", "")
--sed -i "s/^ARG.*//g" $OUTPUT

-- Convert COPY into cp
dockerdata = string.gsub(dockerdata, "COPY ", "cp ")
-- sed -i "s/^COPY/cp/g" $OUTPUT

-- Convert mkdirs into auto sub folder creating with -p
dockerdata = string.gsub(dockerdata, "mkdir ", "mkdir -p ")
-- Fix already correct mkdirs
dockerdata = string.gsub(dockerdata, "mkdir %-p %-p", "mkdir -p")

--sed -i "s/^mkdir/mkdir -p/g" $OUTPUT

-- Convert home directory into squiggles (tildes)
-- dockerdata = string.gsub(dockerdata, "mkdir ", "mkdir -p ")
-- sed -i "s/^$HOME_DIRECTORY/~/g" $OUTPUT

-- Convert ENVs into EXPORTs
dockerdata = string.gsub(dockerdata, "ENV ([_%w]+)[%s=]+([^\n]+)", "export %1=%2")
--sed -r 's/^ENV\s([_,A-Z,0-9]*)\s*([a-z]*)/export \1=\2/g' -i $OUTPUT

-- Convert VARIABLES into bash varaibles
dockerdata = string.gsub(dockerdata, "%{([_%w]+)%}", "%1")
-- sed -r 's/[{}]//g' -i $OUTPUT

-- Get rid of EXPOSE todo: open up ports based on these?
dockerdata = string.gsub(dockerdata, "EXPOSE ", "# EXPOSE")
-- sed -i "s/^EXPOSE\s/# EXPOSE /g" $OUTPUT

-- Convert ADDs into cp
dockerdata = string.gsub(dockerdata, "ADD ", "cp ")
--sed -i "s/^ADD\s/cp /g" $OUTPUT

-- # Timestamp
dockerdata = dockerdata.."# Generated by docker_to_sh ["..os.date().."]\n"
-- sed -i '1s/^/# Generated by docker_to_sh, for all your shoddy bash script from Dockerfile generation needs. \n/' $OUTPUT

------------------------------------------------------------------------------
-- Make some sections that can be enabled/disabled if needed
--
-- Set the following variables to "enabled" or "disabled" to control platform sections
PF_DARWIN               = "disabled"
PF_EMSCRIPTEN_1_38_12   = "disabled"
PF_EMSCRIPTEN_1_39_16   = "disabled"
PF_EMSCRIPTEN_2_0_11    = "enabled"
PF_WINDOWS              = "enabled"
PF_WINDOWS_8_1_SDK      = "disabled"
PF_ANDROID              = "enabled"
PF_SWITCH               = "disabled"
PF_WINE                 = "disabled"


-- Platform Darwin - Includes OSX, and IOS
dockerdata = string.gsub(dockerdata, "# Darwin", [[# Darwin
PF_DARWIN="]]..PF_DARWIN..[["
if [ $PF_DARWIN = "enabled" ]; then 
]] )
-- End darwin tag 
dockerdata = string.gsub(dockerdata, "(#\n# EMSCRIPTEN)",[[
fi
# END PF_DARWIN

%1]] )

-- Platform Emscripten - be able to select version inclusions
dockerdata = string.gsub(dockerdata, "## Emscripten 1.38.12", [[## Emscripten 1.38.12
PF_EMSCRIPTEN_1_38_12="]]..PF_EMSCRIPTEN_1_38_12..[["
if [ $PF_EMSCRIPTEN_1_38_12 = "enabled" ]; then 
]] )

dockerdata = string.gsub(dockerdata, "## Emscripten 1.39.16 %(from version 1.2.170%)", [[fi
# END PF_EMSCRIPTEN_1_38_12

## Emscripten 1.39.16 (from version 1.2.170)
PF_EMSCRIPTEN_1_39_16="]]..PF_EMSCRIPTEN_1_39_16..[["
if [ $PF_EMSCRIPTEN_1_39_16 = "enabled" ]; then 
]] )
    
dockerdata = string.gsub(dockerdata, "## Emscripten 2.0.11 %(from version 1.2.178%)", [[fi
# END PF_EMSCRIPTEN_1_39_16

## Emscripten 2.0.11 (from version 1.2.178)
PF_EMSCRIPTEN_2_0_11="]]..PF_EMSCRIPTEN_2_0_11..[["
if [ $PF_EMSCRIPTEN_2_0_11 = "enabled" ]; then ]] )

dockerdata = string.gsub(dockerdata, "# We use the same temp directory for both versions.",[[fi
# END PF_EMSCRIPTEN_2_0_11

# We use the same temp directory for both versions.]] )

dockerdata = string.gsub(dockerdata, "# We replace it with a folder of our own(.+)update%-alternatives", [[
# We replace it with a folder of our own

# REMOVED TEMP FOLDER NAME REPLACEMENT - TBD

update-alternatives]] )

-- Platform Windows 
dockerdata = string.gsub(dockerdata, "PLATFORMSDK_WIN32=$PLATFORMSDK_DIR/Win32([^\n]+)", 
            [[PLATFORMSDK_WIN32=$PLATFORMSDK_DIR/Win32]] )
dockerdata = string.gsub(dockerdata, "WINDOWS_SDK_10_VERSION=([^\n]+)",
            [[WINDOWS_SDK_10_VERSION="]]..WINDOWS_SDK_10_VERSION..[["]] )
dockerdata = string.gsub(dockerdata, "WINDOWS_MSVC_2019_VERSION=([^\n]+)",
            [[WINDOWS_MSVC_2019_VERSION="]]..MS_VISUAL_STUDIO_VER..[["]] )

dockerdata = string.gsub(dockerdata, "ENV \\", "")

dockerdata = string.gsub(dockerdata, "(#\n# Windows\n#)", [[
%1

PF_WINDOWS="]]..PF_WINDOWS..[["
if [ $PF_WINDOWS = "enabled" ]; then ]] )

dockerdata = string.gsub(dockerdata, "(echo \"WIN32 8.1 %+ 10 SDK\" && \\)",[[
PF_WINDOWS_8_1_SDK="]]..PF_WINDOWS_8_1_SDK..[["
if [ $PF_WINDOWS_8_1_SDK = "enabled" ]; then 

%1]] )

dockerdata = string.gsub(dockerdata, "ln %-s /usr/local/bin/clang /usr/local/bin/x86_64%-pc%-win32%-clang",[[

fi
# END PF_WINDOWS_8_1_SDK 

ln -s /usr/local/bin/clang /usr/local/bin/x86_64-pc-win32-clang]])

-- Platform Android
dockerdata = string.gsub(dockerdata, "(#\n# Android SDK/NDK\n)", [[fi
# END PF_WINDOWS

PF_ANDROID="]]..PF_ANDROID..[["
if [ $PF_ANDROID = "enabled" ]; then

%1]] )

-- Switch SDK
dockerdata = string.gsub(dockerdata, "(#\n# Switch SDK\n)", [[fi
# END PF_ANDROID 

PF_SWITCH="]]..PF_SWITCH..[["
if [ $PF_SWITCH = "enabled" ]; then 

%1]] )

-- Wine 
dockerdata = string.gsub(dockerdata, "(#\n# Wine\n)", [[fi
# END PF_SWITCH 

PF_WINE="]]..PF_WINE..[["
if [ $PF_WINE = "enabled" ]; then 

%1]] )

dockerdata = string.gsub(dockerdata, "chown %-R extender: $WINEPREFIX", [[%1

fi
# END PF_WINE]] )


------------------------------------------------------------------------------

local fh = io.open(OUTPUT, "w")
if(fh) then fh:write(dockerdata); fh:close() end

------------------------------------------------------------------------------
