local gltf = require("gltfloader.gltfloader")

local files = {
--	"/assets/models/Cube/Cube.gltf",
--	"/assets/models/Suzanne/glTF/Suzanne.gltf",
	"/assets/models/DamagedHelmet/glTF/DamagedHelmet.gltf",
--	"/assets/models/Lantern/glTF/Lantern.gltf",
-- "/assets/private/ALPINIST/ALPINIST_HI_Body.gltf",
--"/assets/models/ALPINIST/ALPINIST_HI_Wheel.gltf",
}

function makefile( fpath, fdata )

	local fh = io.open(fpath, "w")
	fh:write(fdata)
	fh:close()
end

function maketempmeshses( meshfile, bufferfile, tempbasepath, count )

	local fh = io.open(meshfile, "r")
	local mdata = fh:read("*a")
	fh:close()

	local fh = io.open(bufferfile, "r")
	local bdata = fh:read("*a")
	fh:close()

	local tmpimgpath = "assets/images/temp.png"
	local fhi = io.open(tmpimgpath, "r")
	local tmpimg = fhi:read("*a")
	fhi:close()	

	local tmpimgpathblack = "assets/images/tempBlack.png"
	local fhi = io.open(tmpimgpathblack, "r")
	local tmpimgblack = fhi:read("*a")
	fhi:close()	

	local tmpimgpathnorm = "assets/images/tempNormal.png"
	local fhi = io.open(tmpimgpathnorm, "r")
	local tmpimgnorm = fhi:read("*a")
	fhi:close()	
	
	for i=1, count do 
	
		local mpath = tempbasepath..string.format("%03d", i)..".mesh"
		local bpath = tempbasepath..string.format("%03d", i)..".buffer"
		local bext = string.format("%03d", i)..".buffer"

		local tapath = tempbasepath..string.format("%03dA", i)..".png"
		local newmdata = string.gsub(mdata, [[textures: ("/assets/images/temp.png")]], "textures: \"/"..tapath.."\"",1)		
		local trpath = tempbasepath..string.format("%03dR", i)..".png"
		newmdata = string.gsub(newmdata, [[textures: ("/assets/images/temp.png")]], "textures: \"/"..trpath.."\"",1)		
		local tmpath = tempbasepath..string.format("%03dE", i)..".png"
		newmdata = string.gsub(newmdata, [[textures: ("/assets/images/temp.png")]], "textures: \"/"..tmpath.."\"",1)		
		local nmpath = tempbasepath..string.format("%03dN", i)..".png"
		newmdata = string.gsub(newmdata, [[textures: ("/assets/images/temp.png")]], "textures: \"/"..nmpath.."\"",1)		
		
		newmdata = string.gsub(newmdata, bufferfile, tempbasepath..bext)

		makefile( tapath, tmpimg )
		makefile( trpath, tmpimgblack )
		makefile( tmpath, tmpimgblack )
		makefile( nmpath, tmpimgnorm )
		
		makefile( mpath, newmdata )
		makefile( bpath, bdata )
	end 
end

function maketempgos( gofile, replacemesh, tempbasepath, count )

	local fh = io.open(gofile, "r")
	local data = fh:read("*a")
	fh:close()

	for i=1, count do 

		local goext = string.format("%03d", i)..".go"
		local mext = string.format("%03d", i)..".mesh"				
		local mpath = tempbasepath..goext
		newdata = string.gsub(data, replacemesh, "temp"..mext)
		local fh = io.open(mpath, "w")
		fh:write(newdata)
		fh:close()
	end 
end


function init(self)

	-- Use this to make some temp meshes, which will be used for the gltf loader
	 maketempmeshses("assets/gotemplate/temp.mesh", "assets/gotemplate/temp.buffer",
			"assets/gotemplate/meshpool/temp", 10)
	-- Use this to make matching go's for the meshes.
	--maketempgos("assets/gotemplate/temp.go", "/assets/gotemplate/temp.mesh", "assets/gotemplate/meshpool/temp", 10)
	
	gltf:setpool("/assets/gotemplate/meshpool/temp", 10)
	local width = (#files - 1) * 2.0
	local sx = -(width/2)
	
	for i=0, #files-1 do 
		local pos = vmath.vector3(sx, 2, 0)
		local fname = files[i + 1]
		print(fname)
		local goname = "/temp"..string.format("%03d", i+1)
		print(goname)
		gltf:load(fname, goname, "temp")
		go.set_position(pos, goname)
		sx = sx + 2
	end 
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
