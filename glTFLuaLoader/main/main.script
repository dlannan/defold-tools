
local mpool = require("gltfloader.meshpool")

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	-- rotate the cube
-- 	go.animate("/objs", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 6)
-- 	go.animate("/objs", "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 9)
-- 	go.animate("/objs", "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 12)
-- 
	-- tint the cube and the sphere
	-- model.set_constant("/objs#cube", "tint", vmath.vector4(1,1,0,1))
	-- 
	-- position directional light
	self.light = vmath.vector4(0, 10, 100.0, 0)
-- 
-- 	model.set_constant("/objs#cube", "light", self.light)
-- 	model.set_constant("/objs#quad", "light", self.light)

	-- Second param regenerates meshes and go files
	mpool.init(10, true)
	self.mesh = {}

	local pos = vmath.vector3(0, 0, 0)
	self.mesh[1] = mpool.addmesh("/assets/models/Cube/Cube.gltf", "mesh1", pos)
	local pos = vmath.vector3(-2, 0, 0)
	self.mesh[2] = mpool.addmesh("/assets/models/DamagedHelmet/glTF/DamagedHelmet.gltf", "mesh2", pos)
	local pos = vmath.vector3(2, 0, 0)
	self.mesh[3] = mpool.addmesh("/assets/models/Suzanne/glTF/Suzanne.gltf", "mesh3", pos)
	local pos = vmath.vector3(-4, 0, 0)
	self.mesh[4] = mpool.addmesh("/assets/models/Lantern/glTF/Lantern.gltf", "mesh4", pos)
	
	self.fmeshA = go.get_rotation(self.helmet)
		
	self.luminance = 1.0
	self.cloud_level = 300.0
	self.time_speed = 1.0
	self.sun_height = 0.0
	self.cloud_cover = 0.5
	self.angle = 0.0

	-- Toggle the visual profiler on hot reload.
	self.profile = false
	profiler.enable_ui(self.profile)
end

function update(self)

	local rad_angle = math.rad(self.angle)
	local rot_angle = vmath.quat_rotation_y(rad_angle)		
	local rotx_angle = vmath.quat_rotation_y(rad_angle)

	go.set_rotation(self.fmeshA * rot_angle, self.mesh[2])
	--go.set_rotation(self.cubeA * rot_angle, "/gogen#genmesh")
	--go.set_rotation(self.planeA * rotx_angle, "/ground#genmesh")
	self.angle = self.angle + 1.0
end

function on_input(self, action_id, action)

	-- move directional light based on input
	self.light.x = 10 * ((action.x - 480) / 480)
	self.light.y = 10 * ((action.y - 320) / 320)
	self.light.z = 5.0

	for k,v in ipairs(self.mesh) do 
		model.set_constant(v, "light", self.light)
	end
	
	self.camerapos = go.get_position("/camera")

	-- Check some keys - 1, 2, 3 for profiling
	if(action.released) then 
	if action_id == hash("zero") then
		self.profile = not self.profile
		profiler.enable_ui(self.profile)
	end 
	if action_id == hash("one") then
		profiler.set_ui_mode(profiler.MODE_RUN)
	end 
	if action_id == hash("two") then
		profiler.set_ui_mode(profiler.MODE_PAUSE)
	end
	if action_id == hash("three") then
		profiler.set_ui_mode(profiler.MODE_RECORD)
	end
	end
end

function on_message(self, message_id, message)	
	
end

function on_reload(self)
	-- Toggle the visual profiler on hot reload.
	profiler.enable_ui(true)
end
