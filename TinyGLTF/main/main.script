

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	-- rotate the cube
	go.animate("/objs", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 6)
	go.animate("/objs", "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 9)
	go.animate("/objs", "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 12)

	-- tint the cube and the sphere
	model.set_constant("/objs#cube", "tint", vmath.vector4(1,1,0,1))
	
	-- position directional light
	self.light = vmath.vector4(0, 10, 100.0, 0)

	model.set_constant("/objs#cube", "light", self.light)
	model.set_constant("/objs#quad", "light", self.light)

	self.luminance = 1.0
	self.cloud_level = 300.0
	self.time_speed = 1.0
	self.sun_height = 0.0
	self.cloud_cover = 0.5
	self.angle = 0.0
end

function update(self)

	local rad_angle = math.rad(self.angle)
	local rot_angle = vmath.quat_rotation_y(rad_angle)		
	local rotx_angle = vmath.quat_rotation_y(rad_angle)
	--go.set_rotation(self.cubeA * rot_angle, "/gogen#genmesh")
	--go.set_rotation(self.planeA * rotx_angle, "/ground#genmesh")
	self.angle = self.angle + 1.0
end

function on_input(self, action_id, action)

	-- move directional light based on input
	self.light.x = 2 * ((action.x - 480) / 480)
	self.light.y = 2 * ((action.y - 320) / 320)
	
	-- self.light.y = 2 * ((action.y - 320) / 320)
	model.set_constant("/objs#cube", "light", self.light)
	model.set_constant("/objs#quad", "light", self.light)

	self.camerapos = go.get_position("/camera")
end

function on_message(self, message_id, message)

	if(message_id == hash("luminance")) then 
		self.luminance = message.value
	end
	if(message_id == hash("cloud_level")) then 
		self.cloud_level = message.value
	end
	if(message_id == hash("time_speed")) then 
		self.time_speed = message.value
	end
	if(message_id == hash("sun_height")) then 
		self.sun_height = message.value
	end	
	if(message_id == hash("cloud_cover")) then 
		self.cloud_cover = message.value
	end		
end

